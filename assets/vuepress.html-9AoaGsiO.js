import{_ as o,r as c,o as i,c as l,a as n,b as s,d as a,e as t}from"./app-0PUHe8AR.js";const p="/assets/1-6L1M-Gca.png",r="/assets/2-Bhk5rs3l.png",u="/assets/3-PbjmFpDO.png",d="/assets/4-0L-F1Nb5.png",m="/assets/5-mhIi9eAi.png",v="/assets/6-KFcs9LjZ.png",h={},k=n("blockquote",null,[n("p",null,"这篇博客就是用vuepress写的，所以这里写下第一篇文章就是vuepress的搭建教程")],-1),b=n("h2",{id:"创建仓库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建仓库","aria-hidden":"true"},"#"),s(" 创建仓库")],-1),g={href:"https://github.com/new",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"<USERNAME>.github.io",-1),f=n("code",null,"https://<USERNAME>.github.io",-1),y=n("code",null,"mokself",-1),x=n("code",null,"mokself.github.io",-1),w=n("code",null,"https://<USERNAME>.github.io/<REPO>",-1),q=n("code",null,"Settings",-1),E=n("img",{src:p,alt:"1.png"},null,-1),j=n("h2",{id:"初始化项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#初始化项目","aria-hidden":"true"},"#"),s(" 初始化项目")],-1),A=n("p",null,"仓库建好后在本地搭建项目",-1),G=n("code",null,"vuepress",-1),N=n("code",null,"vuepress-theme-reco",-1),P={href:"https://vuepress-theme-reco.recoluan.com/",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,"在项目父目录执行初始化指令",-1),S=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,`npx @vuepress-reco/theme-cli init
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),V={class:"custom-container details"},M=n("summary",{class:"custom-container-title"},"npx指令",-1),B=n("br",null,null,-1),L=n("br",null,null,-1),R={href:"https://nodejs.org",target:"_blank",rel:"noopener noreferrer"},T=t('<p>初始化过程中需要选择是否新建目录和新目录名称等，重要的是选择版本要选择<strong>2.x</strong><img src="'+r+`" alt="2.png"></p><p>等待初始化完成</p><h2 id="运行项目" tabindex="-1"><a class="header-anchor" href="#运行项目" aria-hidden="true">#</a> 运行项目</h2><p>初始化后的项目还不能立即运行，需要先安装依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),U=n("br",null,null,-1),z=n("code",null,"<USERNAME>.github.io",-1),C=n("code",null,".vuepress/config.ts",-1),O=n("code",null,"base",-1),D=n("code",null,"/<REPO>/",-1),H=n("br",null,null,-1),K={href:"https://v2.vuepress.vuejs.org/zh/reference/config.html",target:"_blank",rel:"noopener noreferrer"},F=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开浏览器看看效果 <img src="`+u+'" alt="3.png"></p><p>正如我现在博客的风格</p><h2 id="部署项目" tabindex="-1"><a class="header-anchor" href="#部署项目" aria-hidden="true">#</a> 部署项目</h2>',4),Z={href:"https://v2.vuepress.vuejs.org/zh/guide/deployment.html",target:"_blank",rel:"noopener noreferrer"},$=t(`<p>使用Github本身的CI工具就可以实现自动化部署，即推送代码触发工作流执行脚本，刷新到Github Pages上</p><p>在项目根目录创建<code>.github/workflows/docs.yml</code>文件，文件内容如下：</p><details class="custom-container details"><summary class="custom-container-title">DETAILS</summary><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> docs

<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token comment"># 每当 push 到 main 分支时触发部署</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span>
  <span class="token comment"># 手动触发部署</span>
  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span>

<span class="token comment"># 设置 {{ GITHUB_TOKEN }} 的部署权限</span>
<span class="token key atrule">permissions</span><span class="token punctuation">:</span>
  <span class="token key atrule">contents</span><span class="token punctuation">:</span> write

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">docs</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest

    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v4
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token comment"># “最近更新时间” 等 git 日志相关信息，需要拉取全部提交记录</span>
          <span class="token key atrule">fetch-depth</span><span class="token punctuation">:</span> <span class="token number">0</span>

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup pnpm
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> pnpm/action<span class="token punctuation">-</span>setup@v2
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token comment"># 选择要使用的 pnpm 版本</span>
          <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">8</span>
          <span class="token comment"># 使用 pnpm 安装依赖</span>
          <span class="token key atrule">run_install</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v4
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token comment"># 选择要使用的 node 版本</span>
          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token number">18</span>
          <span class="token comment"># 缓存 pnpm 依赖</span>
          <span class="token key atrule">cache</span><span class="token punctuation">:</span> pnpm

      <span class="token comment"># 运行构建脚本</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build VuePress site
        <span class="token key atrule">run</span><span class="token punctuation">:</span> pnpm build

      <span class="token comment"># 查看 workflow 的文档来获取更多信息</span>
      <span class="token comment"># @see https://github.com/crazy-max/ghaction-github-pages</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy to GitHub Pages
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> crazy<span class="token punctuation">-</span>max/ghaction<span class="token punctuation">-</span>github<span class="token punctuation">-</span>pages@v4
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token comment"># 部署到 gh-pages 分支</span>
          <span class="token key atrule">target_branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages
          <span class="token comment"># 部署目录为 VuePress 的默认输出目录</span>
          <span class="token key atrule">build_dir</span><span class="token punctuation">:</span> .vuepress/dist
        <span class="token key atrule">env</span><span class="token punctuation">:</span>
          <span class="token comment"># @see https://docs.github.com/cn/actions/reference/authentication-in-a-workflow#about-the-github_token-secret</span>
          <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>一切准备就绪后，推送代码到github，等待Github Action执行完毕。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 初始化git仓库</span>
<span class="token function">git</span> init
<span class="token comment"># 添加文件到git</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token comment"># 提交到本地仓库</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;init&quot;</span>
<span class="token comment"># 创建main分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-M</span> main
<span class="token comment"># 添加远程仓库 注意修改自己的仓库地址</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/<span class="token operator">&lt;</span>USERNAME<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>USERNAME<span class="token operator">&gt;</span>.github.io.git
<span class="token comment"># 推送到远程仓库</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Action执行完毕后应该会多出一个<code>gh-pages</code>的代码分支，里面是build之后产生的静态文件，现在需要将这个分支设置为Github Pages的源分支<br> 在github仓库的<code>Settings</code>-&gt;<code>Pages</code>-&gt;<code>Branch</code>里选择<code>gh-pages</code>分支，folder选择<code>/(root)</code>，点击<code>Save</code>保存即可</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>如果使用vuepress默认主题是应该选择<code>docs</code>文件夹的，但是使用<code>vuepress-theme-reco</code>主题后应该选择<code>/(root)</code></p></div><p>这个步骤可能会触发重新部署，等待部署完成后就可以访问了<br> 以后每一次提交到main分支都会触发Github Action重新部署，所以只需要推送代码就可以了</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="vuepress-theme-reco和vuepress的关系" tabindex="-1"><a class="header-anchor" href="#vuepress-theme-reco和vuepress的关系" aria-hidden="true">#</a> vuepress-theme-reco和VuePress的关系</h3>`,10),J={href:"https://v2.vuepress.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://vuepress-theme-reco.recoluan.com/",target:"_blank",rel:"noopener noreferrer"},W=t("<p><code>vuepress-theme-reco</code>是<code>VuePress</code>的一个主题，文中的CLI工具安装隐藏里<code>VuePress</code>细节</p><p>在<code>.vuepress/config.ts</code>文件中可以配置一些细节，比如导航栏、侧边栏、友链等等，有的配置或特性<code>VuePress</code>是<code>vuepress-theme-reco</code>提供的，所以需要两个文档结合着看</p>",2),X=n("code",null,"vuepress-theme-reco",-1),Y={href:"https://vuepress-theme-reco.recoluan.com/docs/theme/custom-container.html",target:"_blank",rel:"noopener noreferrer"},nn=t('<h3 id="部署失败" tabindex="-1"><a class="header-anchor" href="#部署失败" aria-hidden="true">#</a> 部署失败</h3><p>每次部署失败都会收到一封邮件，可以点击跳转，也可以在<br> Github仓库的菜单栏上找到<code>Actions</code>，里面可以看到工作流记录，如果部署失败可以点击进去查看具体的错误信息</p><p>成功部署会显示绿色的勾 <img src="'+d+'" alt="4.png"> 查看详细可以看到每一步的执行情况 <img src="'+m+'" alt="5.png"></p><p>错误提示<code>[vite]: Rollup failed to resolve import &quot;vue&quot; from ...</code><br><img src="'+v+`" alt="6.png"> 这是因为工作流配置(<code>.github/workflows/docs.yml</code>)中使用的pnpm进行构建，此时需要安装前置依赖<br> 在项目的<code>package.json</code>中添加</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;peerDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;vue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3.3.13&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@vuepress/client&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.0-rc.0&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过查看依赖树发现<code>vuepress-vite</code>的前置依赖是<code>&quot;vue&quot;: &quot;^3.3.4&quot;</code>，但是这里我试了用<code>&quot;vue&quot;: &quot;^3.3.13&quot;</code>也不会有问题</p><h3 id="github-action" tabindex="-1"><a class="header-anchor" href="#github-action" aria-hidden="true">#</a> Github Action</h3><p>Github Action是Github提供的CI工具，可以在仓库的<code>.github/workflows</code>目录下创建工作流配置文件，当满足触发条件时执行工作流中的脚本<br> 本文用的就是Github Action进行自动化部署</p>`,8),sn={href:"https://docs.github.com/zh/actions",target:"_blank",rel:"noopener noreferrer"},en={href:"https://www.travis-ci.com/",target:"_blank",rel:"noopener noreferrer"};function an(tn,on){const e=c("ExternalLinkIcon");return i(),l("div",null,[k,b,n("p",null,[s("首先在github新建仓库"),n("a",g,[s("New repository"),a(e)]),s("，取名为"),_,s("这样你的访问路径就是"),f,s("， 比如我的github用户名是"),y,s("那么我的仓库地址就应该为"),x,s("，如果取别的名称也可以，但是访问路径就变成"),w,s("。 这个用户名可以在"),q,s("里修改。其他的设置默认就好。 "),E]),j,A,n("p",null,[s("由于这里用的是"),G,s("的一个主题"),N,s("，这个主题自带有CLI工具，所以直接使用这个CLI工具创建项目 "),n("a",P,[s("vuepress-theme-reco官网地址"),a(e)])]),I,S,n("details",V,[M,n("p",null,[s("执行npx命令需要node.js环境"),B,s(" 如果没有安装node无法使用npx，以及vuepress整个生态都是基于node.js"),L,s(" node的官网地址"),n("a",R,[s("https://nodejs.org"),a(e)])])]),T,n("p",null,[s("依赖安装完成后，可以在本地运行一下"),U,s(" 如果你的仓库名不是"),z,s("，那么需要修改"),C,s("文件中的"),O,s("属性，将其修改为"),D,H,s(" 具体的配置参考"),n("a",K,[s("配置|VuePress"),a(e)])]),F,n("p",null,[s("本教程部署到github，如果想部署到其他敌方可以参考vuepress官方的文档"),n("a",Z,[s("https://v2.vuepress.vuejs.org/zh/guide/deployment.html"),a(e)])]),$,n("p",null,[n("a",J,[s("VuePress_2.x"),a(e)]),s(),n("a",Q,[s("vuepress-theme-reco"),a(e)])]),W,n("p",null,[X,s("还提供了一些原本没有的语法规则，例如自定义容器、代码组等等，具体的可以参考"),n("a",Y,[s("Markdown扩展一栏"),a(e)])]),nn,n("p",null,[s("Github Action的使用可以参考"),n("a",sn,[s("官方文档"),a(e)])]),n("p",null,[s("也有其他类似工具可以帮助部署 "),n("a",en,[s("travis-ci"),a(e)])])])}const ln=o(h,[["render",an],["__file","vuepress.html.vue"]]);export{ln as default};
